=begin
#Sematext Cloud API

#API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.

OpenAPI spec version: v3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.25
=end

require 'date'

module stcloud
  class DayUsageData
    attr_accessor :count_daily_data_points

    attr_accessor :day

    attr_accessor :discount

    attr_accessor :dpm_per_container_host_quota

    attr_accessor :dpm_per_host_quota

    attr_accessor :fixed_monthly_price

    attr_accessor :fixed_monthly_price_per_hour

    attr_accessor :free_containers_per_host

    attr_accessor :id

    attr_accessor :kilo_dpm_overage_price_per_hour

    attr_accessor :plan_type

    attr_accessor :price_per_container_host_hour

    attr_accessor :price_per_container_hour

    attr_accessor :price_per_server_hour

    attr_accessor :sum_number_of_container_hosts

    attr_accessor :sum_number_of_containers

    attr_accessor :sum_number_of_servers

    attr_accessor :usage_amount

    attr_accessor :used_plan

    attr_accessor :user_discount

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'count_daily_data_points' => :'countDailyDataPoints',
        :'day' => :'day',
        :'discount' => :'discount',
        :'dpm_per_container_host_quota' => :'dpmPerContainerHostQuota',
        :'dpm_per_host_quota' => :'dpmPerHostQuota',
        :'fixed_monthly_price' => :'fixedMonthlyPrice',
        :'fixed_monthly_price_per_hour' => :'fixedMonthlyPricePerHour',
        :'free_containers_per_host' => :'freeContainersPerHost',
        :'id' => :'id',
        :'kilo_dpm_overage_price_per_hour' => :'kiloDpmOveragePricePerHour',
        :'plan_type' => :'planType',
        :'price_per_container_host_hour' => :'pricePerContainerHostHour',
        :'price_per_container_hour' => :'pricePerContainerHour',
        :'price_per_server_hour' => :'pricePerServerHour',
        :'sum_number_of_container_hosts' => :'sumNumberOfContainerHosts',
        :'sum_number_of_containers' => :'sumNumberOfContainers',
        :'sum_number_of_servers' => :'sumNumberOfServers',
        :'usage_amount' => :'usageAmount',
        :'used_plan' => :'usedPlan',
        :'user_discount' => :'userDiscount'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'count_daily_data_points' => :'Object',
        :'day' => :'Object',
        :'discount' => :'Object',
        :'dpm_per_container_host_quota' => :'Object',
        :'dpm_per_host_quota' => :'Object',
        :'fixed_monthly_price' => :'Object',
        :'fixed_monthly_price_per_hour' => :'Object',
        :'free_containers_per_host' => :'Object',
        :'id' => :'Object',
        :'kilo_dpm_overage_price_per_hour' => :'Object',
        :'plan_type' => :'Object',
        :'price_per_container_host_hour' => :'Object',
        :'price_per_container_hour' => :'Object',
        :'price_per_server_hour' => :'Object',
        :'sum_number_of_container_hosts' => :'Object',
        :'sum_number_of_containers' => :'Object',
        :'sum_number_of_servers' => :'Object',
        :'usage_amount' => :'Object',
        :'used_plan' => :'Object',
        :'user_discount' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `stcloud::DayUsageData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `stcloud::DayUsageData`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'count_daily_data_points')
        self.count_daily_data_points = attributes[:'count_daily_data_points']
      end

      if attributes.key?(:'day')
        self.day = attributes[:'day']
      end

      if attributes.key?(:'discount')
        self.discount = attributes[:'discount']
      end

      if attributes.key?(:'dpm_per_container_host_quota')
        self.dpm_per_container_host_quota = attributes[:'dpm_per_container_host_quota']
      end

      if attributes.key?(:'dpm_per_host_quota')
        self.dpm_per_host_quota = attributes[:'dpm_per_host_quota']
      end

      if attributes.key?(:'fixed_monthly_price')
        self.fixed_monthly_price = attributes[:'fixed_monthly_price']
      end

      if attributes.key?(:'fixed_monthly_price_per_hour')
        self.fixed_monthly_price_per_hour = attributes[:'fixed_monthly_price_per_hour']
      end

      if attributes.key?(:'free_containers_per_host')
        self.free_containers_per_host = attributes[:'free_containers_per_host']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'kilo_dpm_overage_price_per_hour')
        self.kilo_dpm_overage_price_per_hour = attributes[:'kilo_dpm_overage_price_per_hour']
      end

      if attributes.key?(:'plan_type')
        self.plan_type = attributes[:'plan_type']
      end

      if attributes.key?(:'price_per_container_host_hour')
        self.price_per_container_host_hour = attributes[:'price_per_container_host_hour']
      end

      if attributes.key?(:'price_per_container_hour')
        self.price_per_container_hour = attributes[:'price_per_container_hour']
      end

      if attributes.key?(:'price_per_server_hour')
        self.price_per_server_hour = attributes[:'price_per_server_hour']
      end

      if attributes.key?(:'sum_number_of_container_hosts')
        self.sum_number_of_container_hosts = attributes[:'sum_number_of_container_hosts']
      end

      if attributes.key?(:'sum_number_of_containers')
        self.sum_number_of_containers = attributes[:'sum_number_of_containers']
      end

      if attributes.key?(:'sum_number_of_servers')
        self.sum_number_of_servers = attributes[:'sum_number_of_servers']
      end

      if attributes.key?(:'usage_amount')
        self.usage_amount = attributes[:'usage_amount']
      end

      if attributes.key?(:'used_plan')
        self.used_plan = attributes[:'used_plan']
      end

      if attributes.key?(:'user_discount')
        self.user_discount = attributes[:'user_discount']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      plan_type_validator = EnumAttributeValidator.new('Object', ['INFRA', 'PER_AGENT', 'FIXED_PRICE', 'PER_VOLUME'])
      return false unless plan_type_validator.valid?(@plan_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] plan_type Object to be assigned
    def plan_type=(plan_type)
      validator = EnumAttributeValidator.new('Object', ['INFRA', 'PER_AGENT', 'FIXED_PRICE', 'PER_VOLUME'])
      unless validator.valid?(plan_type)
        fail ArgumentError, "invalid value for \"plan_type\", must be one of #{validator.allowable_values}."
      end
      @plan_type = plan_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          count_daily_data_points == o.count_daily_data_points &&
          day == o.day &&
          discount == o.discount &&
          dpm_per_container_host_quota == o.dpm_per_container_host_quota &&
          dpm_per_host_quota == o.dpm_per_host_quota &&
          fixed_monthly_price == o.fixed_monthly_price &&
          fixed_monthly_price_per_hour == o.fixed_monthly_price_per_hour &&
          free_containers_per_host == o.free_containers_per_host &&
          id == o.id &&
          kilo_dpm_overage_price_per_hour == o.kilo_dpm_overage_price_per_hour &&
          plan_type == o.plan_type &&
          price_per_container_host_hour == o.price_per_container_host_hour &&
          price_per_container_hour == o.price_per_container_hour &&
          price_per_server_hour == o.price_per_server_hour &&
          sum_number_of_container_hosts == o.sum_number_of_container_hosts &&
          sum_number_of_containers == o.sum_number_of_containers &&
          sum_number_of_servers == o.sum_number_of_servers &&
          usage_amount == o.usage_amount &&
          used_plan == o.used_plan &&
          user_discount == o.user_discount
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [count_daily_data_points, day, discount, dpm_per_container_host_quota, dpm_per_host_quota, fixed_monthly_price, fixed_monthly_price_per_hour, free_containers_per_host, id, kilo_dpm_overage_price_per_hour, plan_type, price_per_container_host_hour, price_per_container_hour, price_per_server_hour, sum_number_of_container_hosts, sum_number_of_containers, sum_number_of_servers, usage_amount, used_plan, user_discount].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        stcloud.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
