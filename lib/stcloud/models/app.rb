=begin
#Sematext Cloud API

#API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.

OpenAPI spec version: v3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'date'

module stcloud
  class App
    attr_accessor :ajax_threshold

    attr_accessor :app_type

    attr_accessor :app_type_id

    attr_accessor :creator_email

    attr_accessor :credit_card_expiry

    attr_accessor :credit_card_number

    attr_accessor :description

    attr_accessor :display_status

    attr_accessor :first_data_saved_date

    attr_accessor :id

    attr_accessor :integration

    attr_accessor :last_data_received_date

    attr_accessor :last_data_saved_date

    attr_accessor :logged_in_user_app_role

    attr_accessor :monthly_invoice_account

    attr_accessor :name

    attr_accessor :owner_email

    attr_accessor :owning_organization

    attr_accessor :page_load_threshold

    attr_accessor :payment_method_id

    attr_accessor :plan

    attr_accessor :prepaid_account

    attr_accessor :status

    attr_accessor :token

    attr_accessor :trial_end_date

    attr_accessor :url_group_limit

    attr_accessor :user_roles

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'ajax_threshold' => :'ajaxThreshold',
        :'app_type' => :'appType',
        :'app_type_id' => :'appTypeId',
        :'creator_email' => :'creatorEmail',
        :'credit_card_expiry' => :'creditCardExpiry',
        :'credit_card_number' => :'creditCardNumber',
        :'description' => :'description',
        :'display_status' => :'displayStatus',
        :'first_data_saved_date' => :'firstDataSavedDate',
        :'id' => :'id',
        :'integration' => :'integration',
        :'last_data_received_date' => :'lastDataReceivedDate',
        :'last_data_saved_date' => :'lastDataSavedDate',
        :'logged_in_user_app_role' => :'loggedInUserAppRole',
        :'monthly_invoice_account' => :'monthlyInvoiceAccount',
        :'name' => :'name',
        :'owner_email' => :'ownerEmail',
        :'owning_organization' => :'owningOrganization',
        :'page_load_threshold' => :'pageLoadThreshold',
        :'payment_method_id' => :'paymentMethodId',
        :'plan' => :'plan',
        :'prepaid_account' => :'prepaidAccount',
        :'status' => :'status',
        :'token' => :'token',
        :'trial_end_date' => :'trialEndDate',
        :'url_group_limit' => :'urlGroupLimit',
        :'user_roles' => :'userRoles'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'ajax_threshold' => :'Integer',
        :'app_type' => :'String',
        :'app_type_id' => :'Integer',
        :'creator_email' => :'String',
        :'credit_card_expiry' => :'String',
        :'credit_card_number' => :'String',
        :'description' => :'String',
        :'display_status' => :'String',
        :'first_data_saved_date' => :'Integer',
        :'id' => :'Integer',
        :'integration' => :'ServiceIntegration',
        :'last_data_received_date' => :'Integer',
        :'last_data_saved_date' => :'Integer',
        :'logged_in_user_app_role' => :'String',
        :'monthly_invoice_account' => :'BOOLEAN',
        :'name' => :'String',
        :'owner_email' => :'String',
        :'owning_organization' => :'BasicOrganizationDto',
        :'page_load_threshold' => :'Integer',
        :'payment_method_id' => :'Integer',
        :'plan' => :'Plan',
        :'prepaid_account' => :'BOOLEAN',
        :'status' => :'String',
        :'token' => :'String',
        :'trial_end_date' => :'Integer',
        :'url_group_limit' => :'Integer',
        :'user_roles' => :'Array<UserRole>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'ajaxThreshold')
        self.ajax_threshold = attributes[:'ajaxThreshold']
      end

      if attributes.has_key?(:'appType')
        self.app_type = attributes[:'appType']
      end

      if attributes.has_key?(:'appTypeId')
        self.app_type_id = attributes[:'appTypeId']
      end

      if attributes.has_key?(:'creatorEmail')
        self.creator_email = attributes[:'creatorEmail']
      end

      if attributes.has_key?(:'creditCardExpiry')
        self.credit_card_expiry = attributes[:'creditCardExpiry']
      end

      if attributes.has_key?(:'creditCardNumber')
        self.credit_card_number = attributes[:'creditCardNumber']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'displayStatus')
        self.display_status = attributes[:'displayStatus']
      end

      if attributes.has_key?(:'firstDataSavedDate')
        self.first_data_saved_date = attributes[:'firstDataSavedDate']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'integration')
        self.integration = attributes[:'integration']
      end

      if attributes.has_key?(:'lastDataReceivedDate')
        self.last_data_received_date = attributes[:'lastDataReceivedDate']
      end

      if attributes.has_key?(:'lastDataSavedDate')
        self.last_data_saved_date = attributes[:'lastDataSavedDate']
      end

      if attributes.has_key?(:'loggedInUserAppRole')
        self.logged_in_user_app_role = attributes[:'loggedInUserAppRole']
      end

      if attributes.has_key?(:'monthlyInvoiceAccount')
        self.monthly_invoice_account = attributes[:'monthlyInvoiceAccount']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'ownerEmail')
        self.owner_email = attributes[:'ownerEmail']
      end

      if attributes.has_key?(:'owningOrganization')
        self.owning_organization = attributes[:'owningOrganization']
      end

      if attributes.has_key?(:'pageLoadThreshold')
        self.page_load_threshold = attributes[:'pageLoadThreshold']
      end

      if attributes.has_key?(:'paymentMethodId')
        self.payment_method_id = attributes[:'paymentMethodId']
      end

      if attributes.has_key?(:'plan')
        self.plan = attributes[:'plan']
      end

      if attributes.has_key?(:'prepaidAccount')
        self.prepaid_account = attributes[:'prepaidAccount']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'token')
        self.token = attributes[:'token']
      end

      if attributes.has_key?(:'trialEndDate')
        self.trial_end_date = attributes[:'trialEndDate']
      end

      if attributes.has_key?(:'urlGroupLimit')
        self.url_group_limit = attributes[:'urlGroupLimit']
      end

      if attributes.has_key?(:'userRoles')
        if (value = attributes[:'userRoles']).is_a?(Array)
          self.user_roles = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ajax_threshold == o.ajax_threshold &&
          app_type == o.app_type &&
          app_type_id == o.app_type_id &&
          creator_email == o.creator_email &&
          credit_card_expiry == o.credit_card_expiry &&
          credit_card_number == o.credit_card_number &&
          description == o.description &&
          display_status == o.display_status &&
          first_data_saved_date == o.first_data_saved_date &&
          id == o.id &&
          integration == o.integration &&
          last_data_received_date == o.last_data_received_date &&
          last_data_saved_date == o.last_data_saved_date &&
          logged_in_user_app_role == o.logged_in_user_app_role &&
          monthly_invoice_account == o.monthly_invoice_account &&
          name == o.name &&
          owner_email == o.owner_email &&
          owning_organization == o.owning_organization &&
          page_load_threshold == o.page_load_threshold &&
          payment_method_id == o.payment_method_id &&
          plan == o.plan &&
          prepaid_account == o.prepaid_account &&
          status == o.status &&
          token == o.token &&
          trial_end_date == o.trial_end_date &&
          url_group_limit == o.url_group_limit &&
          user_roles == o.user_roles
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [ajax_threshold, app_type, app_type_id, creator_email, credit_card_expiry, credit_card_number, description, display_status, first_data_saved_date, id, integration, last_data_received_date, last_data_saved_date, logged_in_user_app_role, monthly_invoice_account, name, owner_email, owning_organization, page_load_threshold, payment_method_id, plan, prepaid_account, status, token, trial_end_date, url_group_limit, user_roles].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = stcloud.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
