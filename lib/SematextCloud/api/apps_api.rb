=begin
#Sematext Cloud API

#API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.

OpenAPI spec version: v3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.34
=end

module SematextCloud
  class AppsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # delete
    # @param any_state_app_id anyStateAppId
    # @param [Hash] opts the optional parameters
    # @return [GenericMapBasedApiResponse]
    def delete_using_delete(any_state_app_id, opts = {})
      data, _status_code, _headers = delete_using_delete_with_http_info(any_state_app_id, opts)
      data
    end

    # delete
    # @param any_state_app_id anyStateAppId
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenericMapBasedApiResponse, Integer, Hash)>] GenericMapBasedApiResponse data, response status code and response headers
    def delete_using_delete_with_http_info(any_state_app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.delete_using_delete ...'
      end
      # verify the required parameter 'any_state_app_id' is set
      if @api_client.config.client_side_validation && any_state_app_id.nil?
        fail ArgumentError, "Missing the required parameter 'any_state_app_id' when calling AppsApi.delete_using_delete"
      end
      # resource path
      local_var_path = '/users-web/api/v3/apps/{anyStateAppId}'.sub('{' + 'anyStateAppId' + '}', any_state_app_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GenericMapBasedApiResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#delete_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all App types supported for the account identified with apiKey
    # @param [Hash] opts the optional parameters
    # @return [AppTypesResponse]
    def get_app_types_using_get(opts = {})
      data, _status_code, _headers = get_app_types_using_get_with_http_info(opts)
      data
    end

    # Get all App types supported for the account identified with apiKey
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppTypesResponse, Integer, Hash)>] AppTypesResponse data, response status code and response headers
    def get_app_types_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.get_app_types_using_get ...'
      end
      # resource path
      local_var_path = '/users-web/api/v3/apps/types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AppTypesResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#get_app_types_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets defails for one particular App
    # @param any_state_app_id anyStateAppId
    # @param [Hash] opts the optional parameters
    # @return [AppResponse]
    def get_using_get1(any_state_app_id, opts = {})
      data, _status_code, _headers = get_using_get1_with_http_info(any_state_app_id, opts)
      data
    end

    # Gets defails for one particular App
    # @param any_state_app_id anyStateAppId
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppResponse, Integer, Hash)>] AppResponse data, response status code and response headers
    def get_using_get1_with_http_info(any_state_app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.get_using_get1 ...'
      end
      # verify the required parameter 'any_state_app_id' is set
      if @api_client.config.client_side_validation && any_state_app_id.nil?
        fail ArgumentError, "Missing the required parameter 'any_state_app_id' when calling AppsApi.get_using_get1"
      end
      # resource path
      local_var_path = '/users-web/api/v3/apps/{anyStateAppId}'.sub('{' + 'anyStateAppId' + '}', any_state_app_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AppResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#get_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Invite guests to an app
    # @param body For &#x60;app&#x60; and &#x60;apps&#x60; fields only &#x60;id&#x60; needs to be populated.Other fields can be left empty or with default values
    # @param [Hash] opts the optional parameters
    # @return [GenericMapBasedApiResponse]
    def invite_app_guests_using_post1(body, opts = {})
      data, _status_code, _headers = invite_app_guests_using_post1_with_http_info(body, opts)
      data
    end

    # Invite guests to an app
    # @param body For &#x60;app&#x60; and &#x60;apps&#x60; fields only &#x60;id&#x60; needs to be populated.Other fields can be left empty or with default values
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenericMapBasedApiResponse, Integer, Hash)>] GenericMapBasedApiResponse data, response status code and response headers
    def invite_app_guests_using_post1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.invite_app_guests_using_post1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AppsApi.invite_app_guests_using_post1"
      end
      # resource path
      local_var_path = '/users-web/api/v3/apps/guests'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'GenericMapBasedApiResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#invite_app_guests_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all users of apps accessible to this account
    # @param [Hash] opts the optional parameters
    # @return [AppsResponse]
    def list_apps_users_using_get(opts = {})
      data, _status_code, _headers = list_apps_users_using_get_with_http_info(opts)
      data
    end

    # Get all users of apps accessible to this account
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppsResponse, Integer, Hash)>] AppsResponse data, response status code and response headers
    def list_apps_users_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.list_apps_users_using_get ...'
      end
      # resource path
      local_var_path = '/users-web/api/v3/apps/users'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AppsResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#list_apps_users_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all apps accessible by account identified with apiKey
    # @param [Hash] opts the optional parameters
    # @return [AppsResponse]
    def list_using_get1(opts = {})
      data, _status_code, _headers = list_using_get1_with_http_info(opts)
      data
    end

    # Get all apps accessible by account identified with apiKey
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppsResponse, Integer, Hash)>] AppsResponse data, response status code and response headers
    def list_using_get1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.list_using_get1 ...'
      end
      # resource path
      local_var_path = '/users-web/api/v3/apps'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AppsResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#list_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update description of the app
    # App can be in any state
    # @param any_state_app_id App Id
    # @param [Hash] opts the optional parameters
    # @option opts [AppDescription] :body Update Details
    # @return [AppResponse]
    def update_description_using_put1(any_state_app_id, opts = {})
      data, _status_code, _headers = update_description_using_put1_with_http_info(any_state_app_id, opts)
      data
    end

    # Update description of the app
    # App can be in any state
    # @param any_state_app_id App Id
    # @param [Hash] opts the optional parameters
    # @option opts [AppDescription] :body Update Details
    # @return [Array<(AppResponse, Integer, Hash)>] AppResponse data, response status code and response headers
    def update_description_using_put1_with_http_info(any_state_app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.update_description_using_put1 ...'
      end
      # verify the required parameter 'any_state_app_id' is set
      if @api_client.config.client_side_validation && any_state_app_id.nil?
        fail ArgumentError, "Missing the required parameter 'any_state_app_id' when calling AppsApi.update_description_using_put1"
      end
      # resource path
      local_var_path = '/users-web/api/v3/apps/{anyStateAppId}/description'.sub('{' + 'anyStateAppId' + '}', any_state_app_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'AppResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#update_description_using_put1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update app
    # App can be in any state
    # @param body dto
    # @param any_state_app_id App Id
    # @param [Hash] opts the optional parameters
    # @return [AppResponse]
    def update_using_put3(body, any_state_app_id, opts = {})
      data, _status_code, _headers = update_using_put3_with_http_info(body, any_state_app_id, opts)
      data
    end

    # Update app
    # App can be in any state
    # @param body dto
    # @param any_state_app_id App Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppResponse, Integer, Hash)>] AppResponse data, response status code and response headers
    def update_using_put3_with_http_info(body, any_state_app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.update_using_put3 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AppsApi.update_using_put3"
      end
      # verify the required parameter 'any_state_app_id' is set
      if @api_client.config.client_side_validation && any_state_app_id.nil?
        fail ArgumentError, "Missing the required parameter 'any_state_app_id' when calling AppsApi.update_using_put3"
      end
      # resource path
      local_var_path = '/users-web/api/v3/apps/{anyStateAppId}'.sub('{' + 'anyStateAppId' + '}', any_state_app_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'AppResponse' 

      auth_names = opts[:auth_names] || ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#update_using_put3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
