=begin
#Sematext Cloud API

#API Explorer provides access and documentation for Sematext REST API. The REST API requires the API Key to be sent as part of `Authorization` header. E.g.: `Authorization : apiKey e5f18450-205a-48eb-8589-7d49edaea813`.

OpenAPI spec version: v3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.34
=end

require 'date'

module SematextCloud
  class UsageDto
    attr_accessor :daily_usage

    attr_accessor :daily_volume_mb

    attr_accessor :_end

    attr_accessor :failed_count

    attr_accessor :ingested_count

    attr_accessor :ingested_volume

    attr_accessor :limit_change_events

    attr_accessor :max_allowed_mb

    attr_accessor :max_limit_mb

    attr_accessor :start

    attr_accessor :stored_count

    attr_accessor :stored_volume

    attr_accessor :volume_change_events

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'daily_usage' => :'dailyUsage',
        :'daily_volume_mb' => :'dailyVolumeMB',
        :'_end' => :'end',
        :'failed_count' => :'failedCount',
        :'ingested_count' => :'ingestedCount',
        :'ingested_volume' => :'ingestedVolume',
        :'limit_change_events' => :'limitChangeEvents',
        :'max_allowed_mb' => :'maxAllowedMB',
        :'max_limit_mb' => :'maxLimitMB',
        :'start' => :'start',
        :'stored_count' => :'storedCount',
        :'stored_volume' => :'storedVolume',
        :'volume_change_events' => :'volumeChangeEvents'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'daily_usage' => :'Object',
        :'daily_volume_mb' => :'Object',
        :'_end' => :'Object',
        :'failed_count' => :'Object',
        :'ingested_count' => :'Object',
        :'ingested_volume' => :'Object',
        :'limit_change_events' => :'Object',
        :'max_allowed_mb' => :'Object',
        :'max_limit_mb' => :'Object',
        :'start' => :'Object',
        :'stored_count' => :'Object',
        :'stored_volume' => :'Object',
        :'volume_change_events' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SematextCloud::UsageDto` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SematextCloud::UsageDto`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'daily_usage')
        if (value = attributes[:'daily_usage']).is_a?(Array)
          self.daily_usage = value
        end
      end

      if attributes.key?(:'daily_volume_mb')
        self.daily_volume_mb = attributes[:'daily_volume_mb']
      end

      if attributes.key?(:'_end')
        self._end = attributes[:'_end']
      end

      if attributes.key?(:'failed_count')
        self.failed_count = attributes[:'failed_count']
      end

      if attributes.key?(:'ingested_count')
        self.ingested_count = attributes[:'ingested_count']
      end

      if attributes.key?(:'ingested_volume')
        self.ingested_volume = attributes[:'ingested_volume']
      end

      if attributes.key?(:'limit_change_events')
        if (value = attributes[:'limit_change_events']).is_a?(Array)
          self.limit_change_events = value
        end
      end

      if attributes.key?(:'max_allowed_mb')
        self.max_allowed_mb = attributes[:'max_allowed_mb']
      end

      if attributes.key?(:'max_limit_mb')
        self.max_limit_mb = attributes[:'max_limit_mb']
      end

      if attributes.key?(:'start')
        self.start = attributes[:'start']
      end

      if attributes.key?(:'stored_count')
        self.stored_count = attributes[:'stored_count']
      end

      if attributes.key?(:'stored_volume')
        self.stored_volume = attributes[:'stored_volume']
      end

      if attributes.key?(:'volume_change_events')
        if (value = attributes[:'volume_change_events']).is_a?(Array)
          self.volume_change_events = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          daily_usage == o.daily_usage &&
          daily_volume_mb == o.daily_volume_mb &&
          _end == o._end &&
          failed_count == o.failed_count &&
          ingested_count == o.ingested_count &&
          ingested_volume == o.ingested_volume &&
          limit_change_events == o.limit_change_events &&
          max_allowed_mb == o.max_allowed_mb &&
          max_limit_mb == o.max_limit_mb &&
          start == o.start &&
          stored_count == o.stored_count &&
          stored_volume == o.stored_volume &&
          volume_change_events == o.volume_change_events
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [daily_usage, daily_volume_mb, _end, failed_count, ingested_count, ingested_volume, limit_change_events, max_allowed_mb, max_limit_mb, start, stored_count, stored_volume, volume_change_events].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SematextCloud.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
